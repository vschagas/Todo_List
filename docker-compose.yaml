version: '3'

services:
  frontend-container:
    container_name: frontend-container
    # command: bash -c "npm install && npm run dev"
    build:
      context: ./Frontend/web
      dockerfile: Dockerfile
    image: frontend-image
    ports:
      - "3000:3000"
    volumes:
      - ./Frontend/web:/app/frontend
    restart: on-failure
    depends_on:
        - db
        - backend-container
    networks:
      - frontend
        
  backend-container:
    container_name: backend-container
    # command: bash -c "
    #   python manage.py migrate
    #   && python manage.py runserver 0.0.0.0:8000
    #   "
    build: 
      context: ./Backend/myapp
      dockerfile: Dockerfile
    image: backend-image
    ports:
      - "8000:8000"
    volumes:
      - ./Backend/myapp:/app/backend
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy #Adicionado pois o depends on ficava muito rÃ¡pido, com helthcheck resolveu o problema
    networks:
      - backend
      - frontend
    stdin_open: true
    tty: true

  db:
    image: mysql:latest
    container_name: db-container
    environment:
      MYSQL_ROOT_PASSWORD: "123456"
      MYSQL_DATABASE: "TASKS"
    ports:
      - "3306:3306"
    volumes:
      - ./database/mysql_db:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - "MINIO_ROOT_USER=user"
      - "MINIO_ROOT_PASSWORD=password"
    command: server /data --console-address :9001

  createbucket:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add --api s3v4 s3 http://minio:9000 user password;
      /usr/bin/mc mb s3/static/;
      /usr/bin/mc anonymous set download s3/static;
      "
  # django_s3_mock:
  #   build:
  #     context: .
  #   ports:
  #     - "7000:7000"
  #   environment:
  #     - MINIO_ACCESS_KEY_ID=user
  #     - MINIO_SECRET_ACCESS_KEY=password
  #     - MINIO_STORAGE_BUCKET_NAME=static
  #     - MINIO_API=http://minio:9000
  #   depends_on:
  #     - minio
  #     - createbucket

volumes:
  minio_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  
    